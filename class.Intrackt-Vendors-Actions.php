<?php
namespace Intrackt\Vendors;

/*
 * load the source for any required classes or files
 */
require_once( INTRACKT_VENDORS_PLUGIN_DIR . 'class.Intrackt-Vendors-PageLog.php' );

/*
 * The Actions class will display any log messages generated by the Vendors
 */
class Actions {

    /*
     * Have we instantiated the class-- this is a singleton and does not produce children
     */
	private static $initiated = false;
    
    /*
     * Init class
     */
	public static function init() {
		if ( ! self::$initiated ) {
    		self::$initiated = true;
		}
        
	}

    /*
     * add/edit admin product footer code to change display
     */
    public static function intracktVendorsOptions() {
        
        global $intracktVendorsOptions;
        
        if (is_array($intracktVendorsOptions)) return;
        
        $intracktVendorsOptions = apply_filters('intrackt_vendors_getoptions',\get_option('intrackt_vendors'));        

    }    

    /*
     * Filter for making changes to a post page on the store front before it is displayed
     */
    public static function contentFilter($content) {
        
        global $intracktVendorsOptions;

        self::intracktVendorsOptions();
        
        $location=(((!array_key_exists('HTTPS',$_SERVER))||($_SERVER['HTTPS']==''))?"http":"https")."://".$_SERVER['SERVER_NAME'];


        /*
         * This section of code is for the entire single post
         */
        if (is_single() && !is_feed() && in_the_loop()) {

            /*
             * handle simple vendor form
             */
        } elseif ($intracktVendorsOptions['simplevendorform']==1) {

            //PageLog::updateTestLog("contentFilter: start");
            
            /*
             * changes to become a vendor form
             */
            if (is_page('become-a-vendor')) {
                
                /*
                 * get current user email address
                 */
                $user=wp_get_current_user();
                if (isset($user->ID)) {
                    $userEmail=$user->user_email;
                } else {
                    $userEmail='';
                }
                
                /*
                 * handle vender sign up form changes
                 */
                ob_start();
                ?>
                <script>
                    
                    /*
                     * function to process vendor form submit
                     */
                    function submitVendorForm() {
                        
                        document.getElementById("vendor-email").value='<?= $userEmail ?>';
                        document.getElementById("vendor-name").value=document.getElementById("vendor-email").value;
                        
                        //if (document.getElementById("g-recaptcha-response").value.trim() == "") {
                        //    alert("Are you a robot?");
                        //    return false;
                        //}
                        if (document.getElementById("vendor-location").value.trim() == "") {
                            alert("Please enter your address.");
                            return false;
                        }
                        if (document.getElementById("vendor-telephone").value.trim() == "") {
                            alert("Please enter your phone number.");
                            return false;
                        }
                        if (!document.getElementById("vendor-terms").checked) {
                            alert("Please review and accept the terms and conditions.");
                            return false;
                        }
                        this.parentNode.parentNode.submit();
                    }
                    
                    
                    /*
                     * function to make changes to vendor form
                     */
                    function processVendorForm() {

                        /*
                         * If the regular registered vendor form
                         */
                        if (document.getElementById('reg_password') == undefined) {

                            /*
                             * hide unwanted fields
                             */
                            document.getElementById("vendor-name").value="none";
                            document.getElementById("vendor-name").parentNode.style.display="none";
                            document.getElementById("vendor-email").parentNode.style.display="none";
                            document.getElementById("vendor-vat").parentNode.style.display="none";
                            
                            /*
                             * Set function to get submit onclick event
                             */
                            document.getElementById("yith-become-a-vendor-submit").onclick=submitVendorForm;
                            
                            /*
                             * Insert Google Captcha
                             */
                            //buttonObject=document.getElementById("yith-become-a-vendor-submit");
                            //if (buttonObject != undefined) {
                            //    parentObject=buttonObject.parentNode;
                                //parentObject.innerHTML='<div class="g-recaptcha" data-sitekey="6Lf6IV8UAAAAAFmC-cfXoqWsjkLiHaTvXuKibfxb"></div>'+parentObject.innerHTML;
                            //    parentObject.innerHTML='<div class="g-recaptcha" data-sitekey="6LdIp4kUAAAAADMV5HHCBhRzlIENSiPGkbeI1Od0"></div>'+parentObject.innerHTML;
                                
                            //    buttonObject=document.getElementById("yith-become-a-vendor-submit");
                            //    parentObject=buttonObject.parentNode;
                            //    anchor = document.createElement("a");
                            //    anchor.setAttribute("id","intrackt-submit-wrapper");
                            //    parentObject.replaceChild(anchor,buttonObject);
                            //    anchor.appendChild(buttonObject);
                            //    document.getElementById("intrackt-submit-wrapper").onclick=submitVendorForm;
                                
                            //}

                        /*
                         * this is the full registration vendor form: replace with link to login/register
                         */
                        } else {
                            formObject=document.getElementsByClassName("register");
                            if (formObject != undefined) {
                                formObject[0].parentNode.innerHTML="<a href='<?= $location ?>/my-account/' class='intract-vendor-registration'>To become a seller, please click here to login or register.</a>";
                            }
                        }
                        
                        /*
                         * Add a name to the customer_login div for the become a vendor login page
                         */
                        customerLoginDiv=document.getElementById("customer_login");
                        if (customerLoginDiv != undefined) {
                            customerLoginDiv.className=customerLoginDiv.className+" intrackt_vendor_registration";
                        }
                    }
                    document.addEventListener("DOMContentLoaded", processVendorForm);
                </script>
                <?php
                
                /*
                 * add google captcha at beginning of content and dynamic form changes via Javascript at the end.
                 */
                $content=$content.ob_get_clean();

            /*
             * changes to registration form
             */
            } elseif (is_page('my-account')) {
                
                /*
                 * turn off form and replace with a message to go login or register on the site
                 */
                ob_start();
                ?>
                <script>
                    function removeVendorCheckbox() {

                        /*
                         * If the checkbox to register as a vendor is present, hide it
                         */
                        vendorCheckbox=document.getElementById('vendor-register');
                        if (vendorCheckbox != undefined) {
                            vendorCheckbox.parentNode.style.display="none";
                        }
                        
                        /*
                         * Add a name to the customer_login div for the become a normal customer registration page
                         */
                        customerLoginDiv=document.getElementById("customer_login");
                        if (customerLoginDiv != undefined)
                            customerLoginDiv.className=customerLoginDiv.className+" intrackt_customer_login";
                    }
                    document.addEventListener("DOMContentLoaded", removeVendorCheckbox);
                </script>
                <?php
                $content=$content.ob_get_clean();

            } elseif (is_page('shop-filtered')) {
                
                /*
                 * turn off form and replace with a message to go login or register on the site
                 */
                ob_start();
                ?>
                <script>
                    function removeInputBackslashes() {

                        /*
                         * loop through all input fields
                         */
                        inputs=document.getElementsByTagName('input');
                        for (i=0;i<inputs.length;i++) {
                            if (inputs[i].value != undefined)
                                inputs[i].value=inputs[i].value.replace(/\\/g,"");
                        }
                        
                    }
                    document.addEventListener("DOMContentLoaded", removeInputBackslashes);
                </script>
                <?php
                $content=$content.ob_get_clean();

            }
        }
        
        return $content;

    }    

    /*
     * Get the number of pending items for a vendor's products
     */
    private static function pendingProducts() {
        
        global $wpdb,$intracktOfferVendorProducts;
        
        /*
         * do nothing if not a vendor
         */
        $user=wp_get_current_user();
        if ((!in_array('yith_vendor',$user->roles))||(in_array('administrator',$user->roles))) return 0;
        
        /*
         * get the IDs for this vendor's products and exit with zero if none
         */
        self::getVendorsProducts($user);
        if ($intracktOfferVendorProducts=='0') return 0;
        
        /*
         * get the count and return it
         * (prepare not needed)
         */
        $count=$wpdb->get_var(/*prepare not needed*/"
            SELECT count(*)
            FROM {$wpdb->prefix}posts
            WHERE post_type='product'
                AND post_status='pending'
                AND ID IN ({$intracktOfferVendorProducts})
            ");
        return $count;
        
    }    

    /*
     * Get the number of pending items for a vendor's products
     */
    private static function pendingOffers() {
        
        global $wpdb,$intracktOfferVendorProducts;
        
        /*
         * do nothing if not a vendor
         */
        $user=wp_get_current_user();
        if ((!in_array('yith_vendor',$user->roles))||(in_array('administrator',$user->roles))) return 0;
        
        /*
         * get the IDs for this vendor's products and exit with zero if none
         */
        self::getVendorsProducts($user);
        if ($intracktOfferVendorProducts=='0') return 0;
        
        /*
         * get the count and return it
         * (prepare not needed)
         */
        $count=$wpdb->get_var(/*prepare not needed*/"
            SELECT count(*)
            FROM {$wpdb->prefix}posts as p,
                {$wpdb->prefix}postmeta as pm
            WHERE p.post_type='woocommerce_offer'
                AND p.post_status='publish'
                AND pm.post_id=p.ID
                AND pm.meta_key='orig_offer_product_id'
                AND pm.meta_value IN ({$intracktOfferVendorProducts})
            ");
        //PageLog::updateTestLog($wpdb->last_query);
        return $count;
        
    }    

    /*
     * modify the admin menu based on settings
     */
    public static function menuModify() {
        
        global $wpdb,$intracktVendorsOptions,$menu,$submenu;
        
        /*
         * do nothing if not a vendor
         */
        $user=wp_get_current_user();
        if ((!in_array('yith_vendor',$user->roles))||(in_array('administrator',$user->roles))) return;

        /*
         * get options
         */
        self::intracktVendorsOptions();
        
        //PageLog::updateTestLog("menuModify----------------------------------------");
        //PageLog::updateTestObjectLog('$menu', $menu);
        //PageLog::updateTestObjectLog('$submenu', $submenu);
        
        /*
         * get the menu items to be removed
         */
        $menuToHide=$intracktVendorsOptions['hiddenadminmenus'];
        
        /*
         * add orders and WooCommerce to exclusion list (vendor can't do those)
         * and then filter
         */
        $menuToHide[]=array(
            'oldname'=>'Orders',
            'hide'=>1,
            'newname'=>''
        );
        $menuToHide[]=array(
            'oldname'=>'WooCommerce',
            'hide'=>1,
            'newname'=>''
        );
        $menuToHide=apply_filters('intrackt_vendors_getoptions',$menuToHide);
        
        /*
         * we haven't looked for pending products yet
         */
        $pendingProducts=-1;
        
        /*
         * build a new menu and submenu
         */
        $newMenu=array();
        $newSubmenu=array();
        
        /*
         * loop through main menu, bottom to top
         */
        foreach ($menu as $menuArray) {

            /*
             * assume we are keeping menu
             */
            $keepIt=true;
            
            /*
             * loop through menu items to hide:
             *    skip if not hiding
             */
            
            foreach ($menuToHide as $menuItem) {
                //if ($menuItem['hide']!=1)
                //    continue;

                /*
                 * if name matches, remove menu item
                 */
                if (preg_match("/^(.*?>){0,1}\\s*".preg_quote($menuItem['oldname'],'/')."\\s*(<.*?){0,1}$/i",$menuArray[0])==1) {
                    if ($menuItem['hide']==1)
                        $keepIt=false;
                    elseif (trim($menuItem['newname'])!='')
                        $menuArray[0]=str_ireplace($menuItem['oldname'],$menuItem['newname'],$menuArray[0]);
                    break;
                }
                
            }
            
            /*
             * are we keeping it?
             */
            if ($keepIt) {
                
                /*
                 * if has a pending product count, then we need to change it
                 */
                if (strpos($menuArray[0],'pending-count')!==false) {
                    
                    /*
                     * get pending product count if we don't have it.
                     */
                    if ($pendingProducts==-1)
                        $pendingProducts=self::pendingProducts();
                    
                    /*
                     * replace existing count with correct count
                     */
                    $menuArray[0]=preg_replace(
                        array('/count-[0-9]*/','/\\>[0-9]+\\</'),
                        array('count-'.$pendingProducts,'>'.$pendingProducts.'<'),
                        $menuArray[0]);
                }
                
                /*
                 * if the OFFERS menu item, add count
                 */
                if ($menuArray[0]=='OFFERS') {
                    $offerCount=self::pendingOffers();
                    $menuArray[0]="OFFERS <span class='awaiting-mod count-{$offerCount}'><span class='pending-count'>{$offerCount}</span></span>";
                }
                
                $newMenu[]=$menuArray;
            }
                
        }
        
        /*
         * replace menu with new menu
         */
        $menu=$newMenu;
        
        /*
         * loop through submenu, bottom to top
         */
        foreach ($submenu as $parentMenu=>$childMenu) {
            foreach ($childMenu as $childItem) {

                /*
                 * assume we are keeping menu
                 */
                $keepIt=true;

                /*
                 * loop through submenu items to hide:
                 *    skip if not hiding
                 */
                foreach ($menuToHide as $menuItem) {
                    //if ($menuItem['hide']!=1)
                    //    continue;

                    /*
                     * hide it name matches
                     */
                    if (preg_match("/^(.*?>){0,1}\\s*".preg_quote($menuItem['oldname'],'/')."\\s*(<.*?){0,1}$/i",$childItem[0])==1) {
                        if ($menuItem['hide']==1)
                            $keepIt=false;
                        elseif (trim($menuItem['newname'])!='')
                            $childItem[0]=str_ireplace($menuItem['oldname'],$menuItem['newname'],$childItem[0]);
                        break;
                    }
                }

                /*
                 * are we keeping it?
                 */
                if ($keepIt) {
                
                    /*
                     * if has a pending product count, then we need to change it
                     */
                    if (strpos($childItem[0],'pending-count')!==false) {

                        /*
                         * get pending product count if we don't have it.
                         */
                        if ($pendingProducts==-1)
                            $pendingProducts=self::pendingProducts();

                        /*
                         * replace existing count with correct count
                         */
                        $childItem[0]=preg_replace(
                            array('/count-[0-9]*/','/\\>[0-9]+\\</'),
                            array('count-'.$pendingProducts,'>'.$pendingProducts.'<'),
                            $childItem[0]);
                    }

                    $newSubmenu[$parentMenu][]=$childItem;
                }
                
            }
        }
        
        /*
         * replace submenu with new submenu
         */
        $submenu=$newSubmenu;
        
    }    

    /*
     * add/edit admin product footer code to change display
     */
    public static function adminFooter() {
        
        global $wpdb,$intracktVendorsOptions;

        //PageLog::updateTestLog("adminfooter: start");
        
        self::intracktVendorsOptions();
        
        /*
         * determine if this is a product and whether or not it is new
         */
        $iAmAProduct=false;
        $iAmANewProduct=false;
        if ((strpos($_SERVER['SCRIPT_NAME'],'post-new.php')!==false)&&array_key_exists("post_type",$_GET)&&($_GET["post_type"] == "product")) {
            $iAmAProduct=true;
            $iAmANewProduct=true;
        } elseif ((strpos($_SERVER['SCRIPT_NAME'],'post.php')!==false)&&array_key_exists("action",$_GET)&&($_GET["action"] == "edit")&&array_key_exists("post",$_GET)&&(get_post_type($_GET["post"]) == "product")) {
            $iAmAProduct=true;
        }
        
        /*
         * get user and determine if a vendor
         */
        $user=wp_get_current_user();
        $isVendor=in_array('yith_vendor',$user->roles) && !in_array('administrator',$user->roles);

        if ($isVendor) {
            
            /*
             * Hide woocommerce admin menu, which automatically hides all submenus
             */
            ?>
            <script>
                intrackt_toplevel_page_woocommerce=document.getElementById('toplevel_page_woocommerce');
                if ((intrackt_toplevel_page_woocommerce!==null)&&(intrackt_toplevel_page_woocommerce!=undefined)) intrackt_toplevel_page_woocommerce.style.display='none';
            </script>
            <?php
            
            /*
             * do only if viewing list of offers or editing an offer 
             */
            $dealingWithOffers=false;
            $editingAnOffer=false;
            if ((strpos($_SERVER['SCRIPT_NAME'],'edit.php')!==false)&&array_key_exists("post_type",$_GET)&&($_GET["post_type"] == "woocommerce_offer")) {
                $dealingWithOffers=true;
            } elseif ((strpos($_SERVER['SCRIPT_NAME'],'post.php')!==false)&&array_key_exists("action",$_GET)&&($_GET["action"] == "edit")&&array_key_exists("post",$_GET)&&(get_post_type(intval($_GET["post"])) == "woocommerce_offer")) {
                $dealingWithOffers=true;
                $editingAnOffer=true;
            }
            
            if ($dealingWithOffers) {
                /*
                 * hide "Make Offer" button
                 */
                ?>
                <script>
                    makeOfferButtonObj=document.getElementsByClassName('page-title-action');
                    if ((makeOfferButtonObj!==null)&&(makeOfferButtonObj!=undefined)) makeOfferButtonObj[0].style.display='none';
                </script>
                <?php
            }
                
        }

        /*
         * things to do when editing a new or existing product by the store owner or vendor
         */
        if ($iAmAProduct) {
            
            /*
             * all dom loaded functions stored here for later execution
             */
            ?>
            <script>
            intracktDomFunctions=[];
            </script>
            <?php
            
            /*
             * do if editing or adding a new product by owner or vendor
             */
            {
                
                /*
                 * where another plugin can edit product if this plugin is installed under all circumstances
                 */
                do_action("intrackt_vendors_edit_product_always",$user,$iAmANewProduct);
                
                /*
                 * is this a new Vendor Master Product?
                 */
                if (array_key_exists('vendormasterproduct',$_GET)&&($_GET['vendormasterproduct']=='yes')) {
                    ?>
                    <script>
                        function handleMasterVendorProduct() {
                            
                            /*
                             * Force title to Vendor Master Product and eliminate label
                             */
                            titleObj=document.getElementById('title');
                            titleObj.value='Vendor Master Product';
                            titleObj.disabled=true;
                            document.getElementById('title-prompt-text').innerText='';
                            
                            /*
                             * add a form field to the post form
                             */
                            formObj=document.getElementById('post');
                            newInput=document.createElement("input");
                            newInput.setAttribute("type","hidden");
                            newInput.setAttribute("name","vendormasterproduct");
                            newInput.setAttribute("value","testval");
                            formObj.prepend(newInput);
                            

                        }
                        intracktDomFunctions.push(handleMasterVendorProduct);
                    </script>
                    <?php
                }

            }

            /*
             * do if adding or editing a product by a vendor
             */
            if ($isVendor) {
                
                /*
                 * edit product if vendor
                 */
                do_action("intrackt_vendors_edit_product_vendor",$user,$iAmANewProduct);
                
                /*
                 * change name to publish/update button to "pending" if YITH status requests this
                 */
                if (\get_option('yith_wpv_vendors_option_pending_post_status')=='yes') {
                    ?>
                    <script>
                        publishButtonObj=document.getElementById('publish');
                        if ((publishButtonObj!==null)&&(publishButtonObj!=undefined)) publishButtonObj.name='pending';
                    </script>
                    <?php
                }

                /*
                 * Are we replacing the product name prompt
                 */
                if ($intracktVendorsOptions['productnameprompt']!='') {
                    ?>
                    <script>
                        if (document.getElementById('title-prompt-text') != undefined) {
                            document.getElementById('title-prompt-text').innerText="<?= $intracktVendorsOptions['productnameprompt'] ?>";
                        }
                    </script>
                    <?php
                }

                /*
                 * always make sure this vendor is assigned to the product
                 */
                {
                    /*
                     * get this vendor's slug
                     */ 
                    $userVendorSlug=$wpdb->get_var($wpdb->prepare("
                        SELECT t.slug
                        FROM {$wpdb->prefix}term_taxonomy as tt,
                            {$wpdb->prefix}termmeta as tm,
                            {$wpdb->prefix}terms as t
                        WHERE tt.taxonomy='yith_shop_vendor'
                            AND t.term_id=tt.term_id
                            AND tm.term_id=t.term_id
                            AND tm.meta_key='owner'
                            AND tm.meta_value=%d
                        ",$user->ID));

                    ?>
                    <script>
                        /*
                         * if vendor selector is present, stuff with me
                         */
                        vendorSelectObj=document.getElementById('tax-input-yith_shop_vendor');
                        if ((vendorSelectObj!==null)&&(vendorSelectObj!=undefined)) vendorSelectObj.value='<?= $userVendorSlug ?>';

                        /*
                         * if vendor display is present, hide
                         */
                        vendorDisplayObj=document.getElementById('tagsdiv-yith_shop_vendor');
                        if ((vendorDisplayObj!==null)&&(vendorDisplayObj!=undefined)) vendorDisplayObj.style.display='none';

                    </script>
                    <?php

                }

                /*
                 * set commission and hide
                 */
                 {
                     /*
                      * get this vendor's commission
                      */
                    $userVendorCommission=$wpdb->get_var($wpdb->prepare("
                        SELECT tmcommission.meta_value
                        FROM {$wpdb->prefix}term_taxonomy as tt,
                            {$wpdb->prefix}termmeta as tmowner,
                            {$wpdb->prefix}termmeta as tmcommission,
                            {$wpdb->prefix}terms as t
                        WHERE tt.taxonomy='yith_shop_vendor'
                            AND t.term_id=tt.term_id
                            AND tmowner.term_id=t.term_id
                            AND tmowner.meta_key='owner'
                            AND tmowner.meta_value=%d
                            AND tmcommission.term_id=t.term_id
                            AND tmcommission.meta_key='commission'
                        ",$user->ID));

                    ?>
                    <script>
                        function handleCommissions() {
                            /*
                             * if commision field is present, stuff with commission
                             */
                            commissionInputObj=document.getElementById('yith_wpv_product_commission');
                            if ((commissionInputObj!==null)&&(commissionInputObj!==undefined)) commissionInputObj.value='<?= $userVendorCommission ?>';

                        }
                        intracktDomFunctions.push(handleCommissions);

                    </script>
                    <?php

                }

                /*
                 * Are we handling the vendor product edit?
                 */
                $simplifiedProductEdit=$intracktVendorsOptions['simplevendorproductedit']==1;
                if ($simplifiedProductEdit) {

                    $showSalesPrice=$intracktVendorsOptions['displaysalesprice']==1;
                    
                    /*
                     * edit product if vendor and simplified product edit enabled
                     */
                    do_action("intrackt_vendors_edit_product_vendor_simple",$user);
                
                    /*
                     * do only if a new product
                     */
                    if ($iAmANewProduct) {

                        /*
                         * Are we permiting manual SKU entry or is theSKU ID to be generated
                         */
                        if ($intracktVendorsOptions['skuidmethod']!='manual') {
                            /*
                             * assign temp SKU while adding a new product
                             */
                            $dateTime= new \DateTime("now",new \DateTimeZone('America/New_York'));
                            $dateString=$dateTime->format('YmdHis');
                            ?>
                                <script>
                                    stock=document.getElementById('_sku');
                                    if (stock != undefined) stock.value='auto generated <?= $intracktVendorsOptions['skuidmethod'] ?> (<?= $dateString ?>)';
                                </script>
                            <?php
                        }

                        /*
                         * set stock to 1
                         */
                        ?>
                            <script>
                                stock=document.getElementById('_stock');
                                if (stock != undefined) stock.value=1;
                                manageStock=document.getElementById('_manage_stock');
                                if (manageStock != undefined) manageStock.checked=true;

                            </script>
                        <?php

                    }

                    /*
                     * Clean up edit block help
                     */
                    foreach ($intracktVendorsOptions['hiddenproducteditblocks'] as $key=>$valueArray) {
                        $intracktVendorsOptions['hiddenproducteditblocks'][$key]['help']=str_replace(array("'","\n","\r","\\"),array("&apos;","","",""),$valueArray['help']);
                    }
                    ?>
                            
                    <script>

                        /*
                         * Hide all product data immediately until the propper items can be hidden AFTER the DOM is fully loaded
                         */
                        var observerOfSkus;
                        if (document.getElementById("poststuff") != undefined) {
                            document.getElementById("poststuff").style.display="none";
                        }
                        function allScriptChanges() {
                            //console.log('allScriptChanges');

                            /*
                             * Modifications to product add/edit page
                             */
                            if (document.getElementById('title-prompt-text') != undefined) {

                                /*
                                 * add tool tip to title text entry box
                                 */
                                document.getElementById('title').title='<?= $intracktVendorsOptions['productnamerollover'] ?>';

                                /*
                                 * Add product Description heading to product description editor
                                 */
                                if (document.getElementById("intracktLongDescriptionHead") == undefined) {
                                    newDiv=document.createElement("div");
                                    newDiv.setAttribute("id","intracktLongDescriptionHead");
                                    document.getElementById("postdivrich").insertBefore(newDiv,document.getElementById("postdivrich").childNodes[0]);
                                    document.getElementById("intracktLongDescriptionHead").innerHTML=
                                        '<div id="intrackt_vendor_product_edit_help"><?= str_replace(array("'","\n","\r","\\"),array("&apos;","","",""),$intracktVendorsOptions['vendorproducthelp']) ?>'+
                                        '<h2 class="hndle ui-sortable-handle"><?= $intracktVendorsOptions['productlongdescriptionlabel'] ?></h2></div>';
                                    editorTools=document.getElementById("wp-content-editor-tools");
                                    if ((editorTools!==null)&&(editorTools!=undefined)) editorTools.style.paddingTop="0px";
                                }
                                
                                /*
                                 * hide sku entry if not manual
                                 */
                                if ('<?= $intracktVendorsOptions['skuidmethod'] ?>'!='manual') {
                                    
                                    /*
                                     * hide main sku ID
                                     */
                                    skuField=document.getElementsByClassName('_sku_field')[0].style.display='none';
                                    
                                    /*
                                     * set up intercepts to hide variation SKUs
                                     */
                                    setTimeout(listenForAttributes,1000);
                                    
                                    //variationsDiv.innerHtml='';
                                    //variationsDiv.innerHtml='<p></p>';
                                    //variationsDiv.name='new_name';
                                    //variationsDiv.style.display='inline';
                                    listenForAttributes();
                                    
                                }
                                
                                /*
                                 * remove or rename product types
                                 */
                                {
                                    /*
                                     * names to be removed
                                     */
                                    removeThese=<?php echo json_encode($intracktVendorsOptions['hiddenproducttypes']); ?>;
                                    //console.log(removeThese);

                                    /*
                                     * loop through product types
                                     */
                                    productTypeSelection=document.getElementById('product-type')
                                    productTypes=productTypeSelection.options;
                                    //console.log(productTypeSelection);
                                    for (i=productTypes.length-1;i>-1;i--) {
                                        productType=productTypes[i].text.trim().toLowerCase();

                                        /*
                                         * loop through items to remove looking for a match
                                         */
                                        for (j=0;j<removeThese.length;j++) {
                                            //console.log("menu='"+productType+"', remove='"+removeThese[j].oldname+"'");
                                            if (removeThese[j].oldname.toLowerCase()==productType) {

                                                /*
                                                 * matched: if hide, then hide, else rename
                                                 * then exit to next admin menu item
                                                 */
                                                if (removeThese[j].hide=='1')
                                                    productTypeSelection.remove(i);
                                                else if (removeThese[j].newname.trim()!='')
                                                    productTypes[i].text=removeThese[j].newname;

                                                continue;
                                            }
                                        }
                                    }
                                    
                                    /*
                                     * if only one product type is available, hide selection
                                     */
                                    if (productTypeSelection.options.length==1) {
                                        productTypeSelection.style.display='none';
                                        productTypeSelection.parentNode.prepend(productTypeSelection.options[0].text);                                        
                                    }
                                }
                                
                                /*
                                 * Hide virtual product type 
                                 */
                                 if (<?= $intracktVendorsOptions['hidevirtualproducttype'] ?>==1) {
                                    virtualObj=document.getElementById('_virtual');
                                    if ((virtualObj!==null)&&(virtualObj!==undefined)) {
                                        virtualObj.style.display='none';
                                        virtualLabelObj=document.querySelector('label[for="_virtual"]');
                                        if ((virtualLabelObj!==null)&&(virtualLabelObj!==undefined))
                                            virtualLabelObj.style.display='none';
                                    }
                                 }

                                /*
                                 * Hide downloadable product type 
                                 */
                                 if (<?= $intracktVendorsOptions['hidedownloadableproducttype'] ?>==1) {
                                    downloadableObj=document.getElementById('_downloadable');
                                    if ((downloadableObj!==null)&&(downloadableObj!==undefined)) {
                                        downloadableObj.style.display='none';
                                        downloadableLabelObj=document.querySelector('label[for="_downloadable"]');
                                        if ((downloadableLabelObj!==null)&&(downloadableLabelObj!==undefined))
                                            downloadableLabelObj.style.display='none';
                                    }
                                 }

                                /*
                                 * process simplification of product data tabs
                                 */
                                {
                                    /*
                                     * data tabs to remove
                                     */
                                    removeThese=<?php echo json_encode($intracktVendorsOptions['hiddenproductdatatabs']); ?>;
                                    
                                    /*
                                     * loop through tabs, getting each displayname
                                     */
                                    productDataTabs=document.getElementsByClassName('product_data_tabs')[0].children;
                                    for (i=0;i<productDataTabs.length;i++) {
                                        
                                        /*
                                         * assume will be shown and that there is no tab panel
                                         */
                                        productDataTabs[i].setAttribute('data-tabused','yes');
                                        productDataTabs[i].setAttribute('data-panelid','');
                                        
                                        /*
                                         * assume no name and then find first anchor looking for name
                                         */
                                        tabName='undefined';
                                        anchors=productDataTabs[i].querySelectorAll('a');
                                        if ((anchors!==null)&&(anchors!=undefined)) {
                                            
                                            /*
                                             * there is an anchor, so remember the panel ID
                                             */
                                            hrefUrl=anchors[0].href;
                                            productDataTabs[i].setAttribute('data-panelid',hrefUrl.split('#')[1]);
                                            
                                            /*
                                             * look for innter spans and use that for name if found, else use anchor name
                                             */
                                            spans=anchors[0].querySelectorAll('span');
                                            if ((spans!==null)&&(spans!=undefined)) {
                                                tabName=spans[0].innerText.trim().toLowerCase();
                                                objectFound=spans[0];
                                            } else {
                                                tabName=anchors[0].innerText.trim().toLowerCase();
                                                objectFound=anchors[0];
                                            }
                                        }
                                        
                                        /*
                                         * loop through names to hide/rename looking or match 
                                         */
                                        for (j=0;j<removeThese.length;j++) {
                                            //console.log("menu='"+productType+"', remove='"+removeThese[j].oldname+"'");
                                            if (removeThese[j].oldname.toLowerCase()==tabName) {

                                                /*
                                                 * matched: if hide, then hide, else rename
                                                 * then exit to next admin menu item
                                                 */
                                                if (removeThese[j].hide=='1') {
                                                    productDataTabs[i].style.display='none';
                                                    productDataTabs[i].setAttribute('data-tabused','no');
                                                } else if (removeThese[j].newname.trim()!='') {
                                                    objectFound.innerText=removeThese[j].newname;
                                                }
                                                continue;
                                            }
                                        }
                                        
                                    }
                                    
                                    /*
                                     * make first displayed tab have the visible content
                                     */
                                    usedFlag=0;
                                    for (i=0;i<productDataTabs.length;i++) {
                                        
                                        /*
                                         * get used flag and hide show panel based on that
                                         */
                                        isTabUsed=productDataTabs[i].getAttribute('data-tabused');
                                        panelID=productDataTabs[i].getAttribute('data-panelid');
                                        
                                        /*
                                         * do only if there is a panel
                                         */
                                        if (panelID!='') {
                                            //console.log(panelID);
                                            panelObj=document.getElementById(panelID);
                                            if (isTabUsed=='yes') {
                                                if (usedFlag==0) {
                                                    usedFlag=1;
                                                    panelObj.classList.remove('hidden');
                                                    panelObj.style.display='block';
                                                }
                                            } else {
                                                panelObj.classList.add('hidden');
                                                panelObj.style.display='none';
                                            }
                                        }
                                    }
                                    
                                }

                                /*
                                 * hide all postbox widgets in the "hide" list
                                 */
                                {
                                    
                                    /*
                                     * edit boxes to remove
                                     */
                                    removeThese=<?php echo json_encode($intracktVendorsOptions['hiddenproducteditblocks']); ?>;
                                    //console.log("Remove These: "+removeThese);
                                    
                                    /*
                                     * get all postboxes and save in an array with the original nams
                                     */
                                    postBoxesArray=new Array(0);
                                    postBoxes=document.getElementsByClassName('postbox');
                                    //console.log('*********************************************');
                                    //console.log(postBoxes);
                                    for (i=0;i<postBoxes.length;i++) {
                                        
                                        /*
                                         * first remove the very silly "hide-if-js".  Don't know where that is coming from
                                         */
                                        postBoxes[i].classList.remove('hide-if-js');
                                        
                                        /*
                                         * Get the h2 element containing the name
                                         */
                                        postboxName='';
                                        h2Obj=postBoxes[i].querySelectorAll('h2');
                                        if ((h2Obj!==null)&&(h2Obj!=undefined)) {
                                            
                                            /*
                                             * look for innter spans and use that for name if found, else use h2 name
                                             */
                                            spans=h2Obj[0].querySelectorAll('span');
                                            if ((spans!==null)&&(spans!=undefined)&&(spans[0]!=undefined)) {
                                                postboxName=spans[0].innerText.trim().toLowerCase();
                                                objectFound=spans[0];
                                                postBoxesArray.push({name: postboxName, postbox: postBoxes[i], textbox: objectFound});
                                            } else {
                                                postboxName=h2Obj[0].innerText.trim().toLowerCase();
                                                objectFound=h2Obj[0];
                                                postBoxesArray.push({name: postboxName, postbox: postBoxes[i], textbox: objectFound});
                                            }
                                        }
                                    }
                                    
                                    /*
                                     * Go through all the postboxes by original name
                                     */
                                    for (i=0;i<postBoxesArray.length;i++) {
                                        postboxName=postBoxesArray[i].name;
                                        //console.log(postboxName+'==============================================');
                                        
                                        /*
                                         * loop through names to hide/rename looking or match 
                                         */
                                        for (j=0;j<removeThese.length;j++) {
                                            //console.log("oldname='"+removeThese[j].oldname.toLowerCase()+"', postboxName='"+postboxName+"'. indexOf="+postboxName.indexOf(removeThese[j].oldname.toLowerCase()));
                                            if (postboxName.indexOf(removeThese[j].oldname.toLowerCase())>=0) {

                                                //console.log(removeThese[j]);
                                                /*
                                                 * matched: if hide, then hide, else rename
                                                 * then exit to next admin menu item
                                                 */
                                                if (removeThese[j].hide=='1') {
                                                    postBoxesArray[i].postbox.style.display='none';
                                                } else {
                                                    if (removeThese[j].newname.trim()!='')
                                                        postBoxesArray[i].textbox.innerText=removeThese[j].newname;
                                                    if (removeThese[j].help.trim()!='') {
                                                        insideObj=postBoxesArray[i].postbox.getElementsByClassName('inside');
                                                        if ((insideObj!==null)&&(insideObj!=undefined)) {
                                                            //console.log("here");
                                                            newDiv=document.createElement("div");
                                                            insideObj[0].prepend(newDiv);
                                                            newDiv.innerHTML='<span>'+removeThese[j].help+'</span>';
                                                        }
                                                    }
                                                    if (removeThese[j].column=='center') {
                                                        centerDiv=document.getElementById('normal-sortables');
                                                        if (centerDiv!==null) {
                                                            //console.log("center: removeThese[j].oldname='"+removeThese[j].oldname+"'");
                                                            //console.log(centerDiv.children[removeThese[j].position-1]);
                                                            centerDiv.insertBefore(postBoxesArray[i].postbox,centerDiv.childNodes[removeThese[j].position-1]);
                                                        }
                                                    } else if (removeThese[j].column=='right') {
                                                        sideDiv=document.getElementById('side-sortables');
                                                        if (sideDiv!==null) {
                                                            //console.log("right: removeThese[j].oldname='"+removeThese[j].oldname+"'");
                                                            //console.log(centerDiv.children[removeThese[j].position-1]);
                                                            sideDiv.insertBefore(postBoxesArray[i].postbox,sideDiv.childNodes[removeThese[j].position-1]);
                                                        }
                                                    }
                                                }
                                                continue;
                                            }
                                        }
                                        
                                    }
                                }
                                
                                /*
                                 * Hide all arbitrary content
                                 */
                                 {
                                 
                                    /*
                                     * arbitrary content to remove
                                     */
                                    hiddenContent=<?php echo json_encode($intracktVendorsOptions['hiddenarbitrarycontent']); ?>;
                                    
                                    /*
                                     * go through each arbitrary object to rename or hide
                                     */
                                    for (i=0;i<hiddenContent.length;i++) {
                                        
                                        //console.log(hiddenContent[i]);
                                        
                                        /*
                                         * convert text to trimmed lowercase
                                         */
                                        arbitraryTag=hiddenContent[i].tag.trim().toLowerCase();
                                        arbitraryText=hiddenContent[i].text.trim().toLowerCase();
                                        arbitraryHide=hiddenContent[i].hide*1;
                                        arbitraryParent=hiddenContent[i].parent.trim().toLowerCase();
                                        arbitraryNewText=hiddenContent[i].newtext.trim().replace(/\'/g,"\\'");
                                        
                                        /*
                                         * loop through all the tags that match the content to be removed
                                         */
                                        tagObj=document.querySelectorAll(arbitraryTag);
                                        if ((tagObj!==null)&&(tagObj!=undefined)) {
                                            
                                            /*
                                             * deal only where the inner text or value (input) in the tag matches what we are looking for
                                             * (Going down should get the closest one to the inntertext
                                             */
                                            for (j=tagObj.length-1;j>=0;j--) {
                                                
                                                /*
                                                 * Find matching text to value if input widget, innerText otherwise
                                                 */
                                                foundText=((arbitraryTag=='input')?tagObj[j].value:tagObj[j].innerText);
                                                //console.log("arbitraryTag='"+arbitraryTag+"' foundText='"+foundText.toLowerCase()+"' arbitraryText='"+arbitraryText+"', search="+foundText.toLowerCase().indexOf(arbitraryText));
                                                if (foundText.toLowerCase().indexOf(arbitraryText)>=0) {
                                                    
                                                    //console.log("Got Element: arbitraryTag='"+arbitraryTag+"' foundText='"+foundText+"'");
                                                    
                                                    /*
                                                     * if hiding, find the parent tag to hide
                                                     */
                                                    if (arbitraryHide==1) {
                                                        /*
                                                         * convert the parent into an array based on "." and loop through the array
                                                         */
                                                        parentArray=arbitraryParent.split('.');
                                                        hideObj=tagObj[j];
                                                        for (k=0;k<parentArray.length;k++) {
                                                            parentTag=parentArray[k].trim();
                                                            if (parentTag=='') continue;
                                                            parentObj=hideObj.parentNode.closest(parentTag);
                                                            if ((parentObj!==null)&&(parentObj!=undefined))
                                                                hideObj=parentObj;
                                                        }
                                                        
                                                        /*
                                                         * hide the found object
                                                         */
                                                        hideObj.style.display='none';
                                                        
                                                    /*
                                                     * if not hiding, simply rename the text it newtext not empty
                                                     */
                                                    } else if (arbitraryNewText!='') {
                                                        
                                                        if (arbitraryTag=='input')
                                                            tagObj[j].value=arbitraryNewText;
                                                        else
                                                            tagObj[j].innerText=arbitraryNewText;
                                                    }
                                                    
                                                    break;
                                                }
                                            }
                                        }
                                        
                                    }
                                 }

                                /*
                                 * hide sales price if desired
                                 */
                                <?php if (!$showSalesPrice) { ?>
                                    document.getElementById("general_product_data").getElementsByClassName("form-field _sale_price_field ")[0].style.display="none";
                                    document.getElementById("general_product_data").getElementsByClassName("form-field sale_price_dates_fields")[0].style.display="none";
                                <?php } ?>
                                    
                                /*
                                 * reshow product data now that all the bad stuff has been hidden
                                 */
                                document.getElementById("poststuff").style.display="inline";

                            }

                        }
                        intracktDomFunctions.push(allScriptChanges);

                        /*
                         * Add event listeners for change of product attributes  
                         */
                        var skuIdMethod='<?= $intracktVendorsOptions['skuidmethod'] ?>';
                        var skuIdIndex=0;
                        function listenForAttributes() {
                        
                            /*
                             * get all sku ID fields
                             */
                            skuFields=document.querySelectorAll("input[name^='variable_sku']");
                            if ((skuFields!==null)&&(skuFields!==undefined)) {
                                for (i=0;i<skuFields.length;i++) {
                                    
                                    /*
                                     * hide always
                                     */
                                    skuFields[i].closest('p').style.display='none';
                                    
                                    /*
                                     * if empty, set for autogeneration
                                     */
                                    if (skuFields[i].value.trim()=='') {
                                        skuFields[i].value='auto generated '+skuIdMethod+' ('+Date.now()+'-'+skuIdIndex+')';
                                    }
                                }
                            }
                            
                            /*
                             * do this every second
                             */ 
                            setTimeout(listenForAttributes,1000);
                            
                         }


                    </script>
                    <?php
                }            
                
                /*
                 * hide general tab if desired and all of product data area if no other tabs visible
                 */
                if (false) { //zzz !$showGeneralTab)  {
                    ?>
                    <script>

                        function noGeneralTab() {
                            return; //zzz
                            //console.log('noGeneralTab');
                            
                            /*
                             * first, attempt to hide general tab (probably not working)
                             */
                            generalObj=document.getElementById("woocommerce-product-data").getElementsByClassName("general_tab")[0];
                            //generalObj.style.display='none';
                            generalObj.setAttribute('data-used','no');

                            /*
                             * next, add a message
                             */
                            newParaObj = document.createElement("p");
                            newParaObj.setAttribute("id","general_tab_nothingtodo_msg");
                            newParaObj.innerText="General information supplied by store owner.";
                            generalTabData=document.getElementById('general_product_data');
                            generalTabData.appendChild(newParaObj);

                            /*
                             * loop through product data tabs counting those that are not hidden
                             */
                            visibleProductData=0;
                            productDataTabs=document.getElementsByClassName('product_data_tabs')[0].children;
                            //console.log(productDataTabs);
                            for (i=0;i<productDataTabs.length;i++) {
                                //console.log(productDataTabs[i].getAttribute('class'));
                                //console.log(productDataTabs[i].getAttribute('data-used'));
                                if (productDataTabs[i].getAttribute('data-used')=='yes') visibleProductData++;
                            }
                            //console.log(visibleProductData);
                            //('got here?');
                            if (visibleProductData==0) document.getElementById('woocommerce-product-data').style.display='none';
                        }
                        //zzz intracktDomFunctions.push(noGeneralTab);

                    </script>
                    <?php

                }
                
            }
            
            /*
             * do all DOM loaded functions when adding/editing a product
             */
            ?>
            <script>
                document.addEventListener("DOMContentLoaded", intracktDomLoaded);
                function intracktDomLoaded() {
                    //console.log('intracktDomLoaded');
                    for (fIdx=0;fIdx<intracktDomFunctions.length;fIdx++)
                        intracktDomFunctions[fIdx]();
                }

            </script>
            <?php

        }
            
        /*
         * do on all pages
         */
        ?>
        <script>
            /*
             * hide screen options at top of screen on any page if vendor
             */
            screenOpt=document.getElementById("screen-options-link-wrap");
            if (screenOpt != undefined)
                    screenOpt.style.display="none";
                
            /*
             * hide all wordpress messaging at top of page
             */
            wordpressCrap=document.getElementsByClassName('woocommerce-message');
            if ((wordpressCrap!==null)&&(wordpressCrap!=undefined))
                for (i=0;i<wordpressCrap.length;i++) wordpressCrap[i].style.display='none';
            wordpressCrap=document.getElementsByClassName('error');
            if ((wordpressCrap!==null)&&(wordpressCrap!=undefined))
                for (i=0;i<wordpressCrap.length;i++) wordpressCrap[i].style.display='none';

            /*
             * if dashboard page:
             */
            if (document.getElementById("dashboard-widgets-wrap") != undefined) {

                /*
                 * change header
                 */
                document.getElementsByTagName("h1")[0].innerText="Seller Dashboard";

                /*
                 * if a vendor
                 */
                <?php
                if ($isVendor) {
                    $vendorOwner=\get_user_meta($user->ID,'yith_product_vendor',true);
                    $vendorEnabled=\get_term_meta($vendorOwner,'enable_selling',true);
                    if ($vendorEnabled=='yes') {
                    ?>
                        
                        /*
                         * If missing, insert a span so that we can add more html
                         */
                        if (document.getElementById("intracktDashboardSubHead") == undefined) {

                            /*
                             * add the span
                             */
                            newSpan=document.createElement("span");
                            newSpan.setAttribute("id","intracktDashboardSubHead");
                            newSpan.setAttribute("class","intracktDashboardSubHead");
                            myParent=document.getElementById("dashboard-widgets-wrap").parentNode;
                            myParent.insertBefore(newSpan,myParent.childNodes[2]);

                            /*
                             * Add links as requested by client if vendor
                             */
                            document.getElementById("intracktDashboardSubHead").innerHTML=
                                "<p><a href='post-new.php?post_type=product'><?= $intracktVendorsOptions['dashboardconsignprompt'] ?></a></p>"+
                                "<p><a href='edit.php?post_type=product'><?= $intracktVendorsOptions['dashboardmanageprompt'] ?></a></p>"
                                ;
                        }

                <?php }
                }?>
            }
        </script>
        <?php
            
    }    
        
    /*
     * store front wp header hook
     */
    //public static function wpHead() {
        
    //    global $intracktVendorsOptions;

        //PageLog::updateTestLog("wpHead: start");
        
    //    self::intracktVendorsOptions();
        
        /*
         * do this only if doing the simple vendor form
         */
    //    if ($intracktVendorsOptions['simplevendorform']==1) {

            /*
             * within that, to this only if the become a vendor form
             */
    //        if (is_page('become-a-vendor')) {
                
                /*
                 * provide the captcha code
                 */
    //            echo "<script src='https://www.google.com/recaptcha/api.js' asynch defer></script>";
    //        }
            
    //    }
    //}
        
    /*
     * action loading My Account Dashboard
     */
    public static function vendorDashboard() {
        
        global $intracktVendorsOptions;

        /*
         * do nothing if not a vendor
         */
        $user=wp_get_current_user();
        $myRoles=$user->roles;
        $isVendor=(in_array('yith_vendor',$myRoles)&&(!in_array('administrator',$myRoles)));
        if (!$isVendor) return;
        
        /*
         * do nothing if vendor not enabled
         */
        $vendorOwner=\get_user_meta($user->ID,'yith_product_vendor',true);
        $vendorEnabled=\get_term_meta($vendorOwner,'enable_selling',true);
        if ($vendorEnabled!='yes') return;
        
        /*
         * get options
         */
        self::intracktVendorsOptions();
        //PageLog::updateTestLog("vendorDashboard: start");
        
        ?>
            
        <script>
            /*
             * test that it is the VENDOR daahboard and not something else
             */
            myself=document.getElementsByClassName("myaccount_vendor_dashboard");
            if ((myself!==null)&&(myself!= undefined)&&(myself[0]!==null)&&(myself[0]!= undefined))
                myContainer=myself[0].parentNode;
            else
                myContainer=null;
            if (myContainer === null) {
                myself=document.getElementsByClassName("woocommerce-MyAccount-content");
                if ((myself!==null)&&(myself!= undefined))
                   myContainer=myself[0];
            }
            if (myContainer!= undefined) {
                
                /*
                 * Change the heading
                 */
                myH2Obj=myContainer.getElementsByTagName("h2");
                if ((myH2Obj!= undefined)&&(myH2Obj[0]!= undefined)) myH2Obj[0].innerText="Seller Dashboard";
                
                /*
                 * add a span to hold links
                 */
                newSpan=document.createElement("span");
                newSpan.setAttribute("id","intracktDashboardSubHead");
                newSpan.setAttribute("class","intracktDashboardSubHead");
                myContainer.insertBefore(newSpan,myContainer.childNodes[6]);

                /*
                 * Add links as requested by client
                 */
                document.getElementById("intracktDashboardSubHead").innerHTML=
                    "<p><a href='/wp-admin/post-new.php?post_type=product' target='managebooks'><?= $intracktVendorsOptions['dashboardconsignprompt'] ?></a></p>"+
                    "<p><a href='/wp-admin/edit.php?post_type=product' target='managebooks'><?= $intracktVendorsOptions['dashboardmanageprompt'] ?></a></p>"
                    ;
            }
            
            //alert(.length);
        </script>
            
        <?php

    }    

    /*
     * action loading My Account account details
     */
    public static function myAccountDetails() {

        //PageLog::updateTestLog("vendorDashboard: start");

        ?>
        <h2 id="intrackt_accountaddresseshead" class="intrackt_accountaddresseshead">Edit Addresses</h2>
        <?php
        
        do_action( 'woocommerce_account_edit-address_endpoint');
        ?>
        <h2 id="intrackt_accountdetailsformhead" class="intrackt_accountdetailsformhead">Edit Name, Email Address, and Password</h2>
        <?php
        
    }
    
    /*
     * action loading My Account account details
     */
    public static function myAccountNavigation() {

        //PageLog::updateTestLog("myAccountNavigation: start");
        
        ?>
        
        <script>
            document.getElementsByClassName("woocommerce-MyAccount-navigation-link woocommerce-MyAccount-navigation-link--downloads")[0].style.display="none";
            document.getElementsByClassName("woocommerce-MyAccount-navigation-link woocommerce-MyAccount-navigation-link--edit-address")[0].style.display="none";
        </script>
        
        <?php
    }
        
    /* =========================================================================
     * A product has just been updated or added
     */
    public static function updatedOrInsertedPost($post_id,$post,$update) {
        
        global $wpdb,$intracktVendorsOptions;
        
        /*
         * get the add and prefix values
         */
        self::intracktVendorsOptions();
        $addNumber=$intracktVendorsOptions['skuconstantnumber']*1;
        $prefixText=$intracktVendorsOptions['skuconstantprefix'];
        
        /*
         * handle all sku IDs for "add"
         */
        {
            /*
             * get list of all product skus that have the value 'auto generated add'
             */
            $autoSkus=$wpdb->get_col(/*prepare not needed*/"SELECT post_id FROM  {$wpdb->prefix}postmeta WHERE meta_key='_sku' AND meta_value LIKE 'auto generated add%'");

            /*
             * loop through them
             */
            foreach ($autoSkus as $post_id) {

                /*
                 * and assign the SKU ID
                 */
                update_post_meta($post_id,'_sku',$addNumber+$post_id);

            }
            
            /*
             * get list of all variation skus for the products
             */
            //if (count($autoSkus)>0) {
                
            //    $autoSkuList=implode(',',$autoSkus);
            //    $autoVariationSkus=$wpdb->get_col("SELECT ID FROM  {$wpdb->prefix}posts WHERE post_type='product_variation' AND post_parent in ({$autoSkuList})");

                /*
                 * loop through them
                 */
            //    foreach ($autoVariationSkus as $post_id) {

                    /*
                     * and assign the SKU ID
                     */
            //        update_post_meta($post_id,'_sku',$addNumber+$post_id);

            //    }
            //}
            
        }
        
        /*
         * handle all sku IDs for "prefix"
         */
        {
            /*
             * get list of all product skus that have the value 'auto generated prefix'
             */
            $autoSkus=$wpdb->get_col(/*prepare not needed*/"SELECT post_id FROM  {$wpdb->prefix}postmeta WHERE meta_key='_sku' AND meta_value LIKE 'auto generated prefix%'");

            /*
             * loop through them
             */
            foreach ($autoSkus as $post_id) {

                /*
                 * and assign the SKU ID
                 */
                update_post_meta($post_id,'_sku',$prefixText.$post_id);

            }
            
            /*
             * get list of all variation skus for the products
             */
            //if (count($autoSkus)>0) {
                
            //    $autoSkuList=implode(',',$autoSkus);
            //    $autoVariationSkus=$wpdb->get_col("SELECT ID FROM  {$wpdb->prefix}posts WHERE post_parent in ({$autoSkuList})");

                /*
                 * loop through them
                 */
            //    foreach ($autoVariationSkus as $post_id) {

                    /*
                     * and assign the SKU ID
                     */
            //        update_post_meta($post_id,'_sku',$prefixText.$post_id);

            //    }
            //}
            
        }
        
    }
        
    /*
     * filter post queries for this vendor
     */
    private static function getVendorsProducts($user) {
        
        global $wpdb,$intracktOfferVendorProducts;
        
        /*
         * skip if we already have the vendor products
         */
        if ($intracktOfferVendorProducts===null) {
            
            /*
             * current vendor ID
             */
            $userId=$user->ID;

            /*
             * get all products created by/for this vendor as an IN list
             */
            $productIdArray=$wpdb->get_col($wpdb->prepare("
                SELECT tr.object_id AS product_id
                FROM {$wpdb->prefix}term_relationships AS tr,
                    {$wpdb->prefix}term_taxonomy as tt,
                    {$wpdb->prefix}termmeta as tm
                WHERE tr.term_taxonomy_id=tt.term_id
                    AND tt.taxonomy='yith_shop_vendor'
                    AND tm.term_id=tt.term_id
                    AND tm.meta_key='owner'
                    AND tm.meta_value=%d
                ",$userId));
            $productIdArray[]=0; //add an empty value in case list is empty
            $intracktOfferVendorProducts=implode(',',$productIdArray);
        
        }
    }
        
    /*
     * filter post queries for this vendor
     */
    private static function getAllVendorsProducts() {
        
        global $wpdb,$intracktOfferAllVendorProducts;
        
        /*
         * skip if we already have the vendor products
         */
        if ($intracktOfferAllVendorProducts===null) {
            
            /*
             * get all products created by/for this vendor as an IN list
             */
            $productIdArray=$wpdb->get_col(/*prepare not needed*/"
                SELECT tr.object_id AS product_id
                FROM {$wpdb->prefix}term_relationships AS tr,
                    {$wpdb->prefix}term_taxonomy as tt,
                    {$wpdb->prefix}termmeta as tm
                WHERE tr.term_taxonomy_id=tt.term_id
                    AND tt.taxonomy='yith_shop_vendor'
                    AND tm.term_id=tt.term_id
                    AND tm.meta_key='owner'
                ");
            $productIdArray[]=0; //add an empty value in case list is empty
            $intracktOfferAllVendorProducts=implode(',',$productIdArray);
        
        }
    }
        
    /*
     * filter post query joins
     */
    //public static function filterProductQueryJoin($join) {
        
        //global $wpdb,$intracktOfferVendorProducts;
        
        /*
         * exit if not filtering offers
         */
        //require_once(ABSPATH . 'wp-admin/includes/screen.php');
        //$screen = get_current_screen();
        //if (($screen===null)||($screen->post_type != 'product')) return $join;
        
        /*
         * get current user
         */
        //$user = wp_get_current_user();
        
        /*
         * do this if the user is a vendor
         */
        //if (in_array('yith_vendor',$user->roles)) {
            
            /*
             * get vendor products
             */
            //self::getVendorsProducts($user);

            //$join="
            //    INNER JOIN {$wpdb->prefix}postmeta as intrackt_offers_pm1
            //    ON {$wpdb->prefix}posts.ID = intrackt_offers_pm1.post_id
            //    AND intrackt_offers_pm1.meta_key = 'orig_offer_product_id'
            //    AND intrackt_offers_pm1.meta_value IN ({$intracktOfferVendorProducts})
            //    ".$join;
                
        //}
            
        //PageLog::updateTestLog($join);

        /*
         * return updated join
         */
        //return $join;
    //}
        
    /*
     * filter post queries
     */
    public static function filterProductQuerys($query) {
        
        global $wpdb,$intracktOfferVendorProducts,$intracktFPCInfiniteLoop;
        
        /*
         * if not everything set up
         */
        if (!function_exists('wp_get_current_user')) return $query;
        
        /*
         * prevent infinite loop
         */
        if ($intracktFPCInfiniteLoop==1) return $query;
        $intracktFPCInfiniteLoop=1;

        /*
         * are we looking at list of products?
         */
        if ((strpos($_SERVER['SCRIPT_NAME'],'edit.php')===false)||($_GET['post_type']!='product')) {
            $intracktFPCInfiniteLoop=0;
            return $query;
        }

        /*
         * get current user
         */
        $user = \wp_get_current_user();

        /*
         * do this if the user is a vendor
         */
        if (in_array('yith_vendor',$user->roles)) {

            /*
             * get vendor products and restrict query to the list
             */
            self::getVendorsProducts($user);
            $query=preg_replace("/\s([^\s]*)post_type\s=\s'product'/"," $1post_type = 'product' AND $1ID IN ({$intracktOfferVendorProducts})",$query);

        }

        /*
         * no longer in infinite loop danger
         */
        $intracktFPCInfiniteLoop=0;
        
        /*
         * always return query, modified or not
         */
        return $query;
        
    }
        
    /*
     * filter post queries
     */
    public static function filterProductOfferQuerys($query) {
        
        global $wpdb,$intracktOfferVendorProducts,$intracktOfferAllVendorProducts,$intracktFPOCInfiniteLoop,$intracktVendorsOptions;
        
        /*
         * if not everything set up
         */
        if (!function_exists('wp_get_current_user')) return $query;
        
        /*
         * only process woocommerce offer counts
         */
        if ((strpos($query,'COUNT')===false)||(strpos($query,"'woocommerce_offer'")===false)||(strpos($query,"'publish'")===false)) return $query;
        
        /*
         * prevent infinite loop
         */
        if ($intracktFPOCInfiniteLoop==1) return $query;
        $intracktFPOCInfiniteLoop=1;

        /*
         * get options
         */
        self::intracktVendorsOptions();
        
        /*
         * get current user
         */
        $user = \wp_get_current_user();

        /*
         * do this if the user is a vendor
         */
        if (in_array('yith_vendor',$user->roles)) {

            /*
             * get vendor products
             */
            self::getVendorsProducts($user);

            /*
             * get vendor products and restrict offers query to the list
             */
            $query=str_replace("WHERE","
            INNER JOIN {$wpdb->prefix}postmeta as intrackt_offers_pm1
            ON {$wpdb->prefix}posts.ID = intrackt_offers_pm1.post_id
            AND intrackt_offers_pm1.meta_key = 'orig_offer_product_id'
            AND intrackt_offers_pm1.meta_value IN ({$intracktOfferVendorProducts})
            WHERE
            ",$query);
            
            //PageLog::updateTestLog("filterProductOfferQuerys: Vendor: {$query}");
            
        } elseif ($intracktVendorsOptions['hidevendoroffers']==1) {
            
            /*
             * get all vendor products
             */
            self::getAllVendorsProducts();

            /*
             * get vendor products and restrict offers query to those not on the list
             */
            $query=str_replace("WHERE","
            INNER JOIN {$wpdb->prefix}postmeta as intrackt_offers_pm1
            ON {$wpdb->prefix}posts.ID = intrackt_offers_pm1.post_id
            AND intrackt_offers_pm1.meta_key = 'orig_offer_product_id'
            AND intrackt_offers_pm1.meta_value NOT IN ({$intracktOfferAllVendorProducts})
            WHERE
            ",$query);
            
            //PageLog::updateTestLog("filterProductOfferQuerys: Administrator: {$query}");
            
        }

        /*
         * no longer in infinite loop danger
         */
        $intracktFPOCInfiniteLoop=0;
        
        /*
         * always return query, modified or not
         */
        return $query;
        
    }
        
    /*
     * Get the important fields from the master vendor product
     */
    private static function getMasterProduct() {
        
        global $wpdb,$intracktMasterVendorProduct;

        /*
         * exit if already have it
         */
        if (is_array($intracktMasterVendorProduct)) return;
        
        /*
         * get it
         */
        $masterProductSlug=apply_filters('intrackt_vendors_master_product','vendor-master-product');
        $intracktMasterVendorProduct=$wpdb->get_row($wpdb->prepare("SELECT ID,post_content,post_excerpt FROM {$wpdb->prefix}posts WHERE post_name=%s",$masterProductSlug),ARRAY_A);
        if (!is_array($intracktMasterVendorProduct)) $intracktMasterVendorProduct=array();
            
        return;
    }
        
    /*
     * prefill new post content
     */
    public static function prefillNewPostContent($content) {
        
        global $intracktMasterVendorProduct,$intracktVendorsOptions;

        /*
         * get plugin settings and exit if not simplifying vendor product edit
         */
        self::intracktVendorsOptions();
        if ($intracktVendorsOptions['simplevendorproductedit']!=1) return $content;
        
        /*
         * get user and exit if not adjusting not a vendor
         */
        $user=wp_get_current_user();
        if (!in_array('yith_vendor',$user->roles) || in_array('administrator',$user->roles)) return $content;

        /*
         * get the vendor master product if it exists and return the content
         */
        self::getMasterProduct();
        if (count($intracktMasterVendorProduct)!=0)
            $content=$intracktMasterVendorProduct['post_content'];
        
        return apply_filters('intrackt_vendors_master_excerpt',$content);

    }
        
    /*
     * prefill new post content
     */
    public static function prefillNewPostExcerpt($excerpt) {
        
        global $intracktMasterVendorProduct,$intracktVendorsOptions;

        /*
         * get plugin settings and exit if not simplifying vendor product edit
         */
        self::intracktVendorsOptions();
        if ($intracktVendorsOptions['simplevendorproductedit']!=1) return $excerpt;
        
         /*
         * get user and exit if not a vendor
         */
        $user=wp_get_current_user();
        if (!in_array('yith_vendor',$user->roles) || in_array('administrator',$user->roles)) return $excerpt;

        /*
         * get the vendor master product if it exists and return the excerpt
         */
        self::getMasterProduct();
        if (count($intracktMasterVendorProduct)!=0)
            $excerpt=$intracktMasterVendorProduct['post_excerpt'];
        
        return apply_filters('intrackt_vendors_master_excerpt',$excerpt);

    }
        
    /*
     * prefill new post meta and terms
     */
    public static function prefillNewPost($post) {
        
        global $intracktMasterVendorProduct,$intracktVendorsOptions;
        
        /*
         * get plugin settings and exit if not simplifying vendor product edit
         */
        self::intracktVendorsOptions();
        if ($intracktVendorsOptions['simplevendorproductedit']!=1) return;
        
        /*
         * get user and exit if not a vendor
         */
        $user=wp_get_current_user();
        if (!in_array('yith_vendor',$user->roles) || in_array('administrator',$user->roles)) return;

        /*
         * get the vendor master product if it exists
         */
        self::getMasterProduct();
        if (count($intracktMasterVendorProduct)==0) return;
        $masterId=$intracktMasterVendorProduct['ID'];

        /*
         * get me
         */
        $postId=$post->ID;
        
        /*
         * POST META FIELDS
         */
        {
            /*
             * Get post meta fields to NOT copy
             */
            $excludeMetas=apply_filters('intrackt_vendors_master_metasexcluded',array(
                '_edit_lock',
                '_edit_last'
            ));

            /*
             * get all postmeta fields
             */
            $postMetas=apply_filters('intrackt_vendors_master_metasfound',get_post_meta($masterId));

            //PageLog::updateTestObjectLog("master vendor \$postMeta",$postMetas);
            
            /*
             * add all valid postmeta fields to new product
             */
            foreach ($postMetas as $key=>$valuesArray) {

                // Skip excluded postmetas
                if (in_array($key,$excludeMetas)) continue;

                /*
                 * loop through values array, updating first one and adding the remainder
                 * (This assumes that a new product will not have any postmeta with multiple postmetas with the same key)
                 */
                foreach ($valuesArray as $index=>$value) {
                    if ($index==1)
                        update_post_meta($postId,$key,$value);
                    else
                        add_post_meta($postId,$key,$value,true);
                }
            }
        }
        
        /*
         * TAXONOMIES
         */
        {

            /*
             * get all the taxonomies
             */
            $taxonomies=apply_filters('intrackt_vendors_master_taxesfound',get_taxonomies());

            //PageLog::updateTestObjectLog("master vendor \$taxonomies",$taxonomies);

            /*
             * process copying the terms for each taxonomy
             */
            foreach ($taxonomies as $taxonomy) {
                $terms=get_the_terms($masterId,$taxonomy);
                
                /*
                 * don't copy if no terms
                 */
                if ((!is_array($terms))||(count($terms)==0)) continue;
                
                //PageLog::updateTestObjectLog("master vendor \$terms",$terms);
                /*
                 * get array of term IDs
                 */
                $termIds=array();
                foreach ($terms as $term) {
                    $termIds[]=$term->term_id;
                }
                
                /*
                 * update new post
                 */
                wp_set_post_terms($postId,$termIds,$taxonomy);
            }
        }
        
        return;
        
    }
        
    /*
     * filter new order to email address
     */
    //public static function filterVendorNewOrderRecipient($to,$object,$me) {
    //public static function filterVendorOrderRecipient($to) {
        
    //    global $intracktVendorsOptions;
        
    //    //PageLog::updateTestLog("filterVendorOrderRecipient \$to='{$to}'");
        /*
         * if recipient is going to vendor, do nothing
         */
    //    self::intracktVendorsOptions();
    //    if ($intracktVendorsOptions['newordertoemail']==0) return $to;

        /*
         * use email address for store owner's new orders
         */
    //    $wcNewOrderDetails=\get_option('woocommerce_new_order_settings');
        //PageLog::updateTestObjectLog('filterRecipientEmailAddress $wcNewOrderDetails', $wcNewOrderDetails);
    //    return $wcNewOrderDetails['recipient'];
        
    //}
        
    /*
     * Part 1: modify sold by message so that we know to remove it
     */
    public static function filterVendorNameOnOrdersPart1($soldMsg) {
        
        global $intracktVendorsOptions;
        
        /*
         * if keeping vendor name, do nothing
         */
        self::intracktVendorsOptions();
        //PageLog::updateTestLog("filterVendorNameOnOrders '{$intracktVendorsOptions['hideordervendorname']}'");
        if ($intracktVendorsOptions['hideordervendorname']==0) return $soldMsg;

        /*
         * else flag sold by message for vendor name removal
         */
        return 'RemoveVendorName';
        
    }
        
    /*
     * Part 2: if flagged for vendor removal, then remove it.
     */
    public static function filterVendorNameOnOrdersPart2($productTitle,$cartItem,$cartItemKey) {
        
        /*
         * If product title contains removal flag, then remove it!
         */
        //PageLog::updateTestLog('Before: '.$productTitle);
        $productTitle=preg_replace("#<span.*yith_wcmv_sold_by_wrapper.*RemoveVendorName.*</span>#U","",$productTitle);
        //PageLog::updateTestLog('After: '.$productTitle);
        return preg_replace("/<small>.*RemoveVendorName.*<\/small>/","",$productTitle);
        
    }
        
    /*
     * filter post query joins
     */
    public static function filterOfferQueryJoin($join) {
        
        global $wpdb,$intracktOfferVendorProducts,$intracktOfferAllVendorProducts,$intracktVendorsOptions;
        
        /*
         * get options snd exit if not set
         */
        self::intracktVendorsOptions();
        
        /*
         * exit if not filtering offers
         */
        require_once(ABSPATH . 'wp-admin/includes/screen.php');
        $screen = get_current_screen();
        if (($screen===null)||($screen->post_type != 'woocommerce_offer')) return $join;
        
        /*
         * get current user
         */
        $user = wp_get_current_user();
        
        /*
         * do this if the user is a vendor
         */
        if (in_array('yith_vendor',$user->roles)&&(!in_array('administrator',$user->roles))) {
            
            //PageLog::updateTestLog("filterOfferQueryJoin vendor only");
            
            /*
             * get vendor products
             */
            self::getVendorsProducts($user);

            $join="
                INNER JOIN {$wpdb->prefix}postmeta as intrackt_offers_pm1
                ON {$wpdb->prefix}posts.ID = intrackt_offers_pm1.post_id
                AND intrackt_offers_pm1.meta_key = 'orig_offer_product_id'
                AND intrackt_offers_pm1.meta_value IN ({$intracktOfferVendorProducts})
                ".$join;
                
        /*
         * do this if the user is not a vendor (store owner)
         */
        } elseif ($intracktVendorsOptions['hidevendoroffers']==1) {
            
            //PageLog::updateTestLog("filterOfferQueryJoin not vendor or administrator");
            
            /*
             * get all vendor products
             */
            self::getAllVendorsProducts();

            $join="
                INNER JOIN {$wpdb->prefix}postmeta as intrackt_offers_pm1
                ON {$wpdb->prefix}posts.ID = intrackt_offers_pm1.post_id
                AND intrackt_offers_pm1.meta_key = 'orig_offer_product_id'
                AND intrackt_offers_pm1.meta_value NOT IN ({$intracktOfferAllVendorProducts})
                ".$join;
                
        }
            
        //PageLog::updateTestLog($join);

        /*
         * return updated join
         */
        return $join;
    }
        
    /*
     * filter post queries
     */
    public static function filterOfferQuerys($query) {
        
        global $wpdb,$intracktOfferVendorProducts,$intracktOfferAllVendorProducts,$intracktVendorsOptions;
                
        /*
         * get options snd exit if not set
         */
        self::intracktVendorsOptions();
        
        /*
         * exit if not filtering offers
         */
        require_once(ABSPATH . 'wp-admin/includes/screen.php');
        $screen = get_current_screen();
        if (($screen===null)||($screen->post_type != 'woocommerce_offer')) return $query;

       /*
        * make changes only if the query is getting the counts for the post list
        */
        if (preg_match("/SELECT\s+post_status.+COUNT\s*\(\s*\*\s*\).*post_type\s*=\s*'woocommerce_offer'/",$query)==1) {
        
            /*
             * get current user
             */
            $user = wp_get_current_user();

            /*
             * do this if the user is a vendor
             */
            if (in_array('yith_vendor',$user->roles)&&(!in_array('administrator',$user->roles))) {

                //PageLog::updateTestLog("filterOfferQuerys vendor only");
                /*
                 * get vendor products
                 */
                self::getVendorsProducts($user);

                $query=preg_replace("/FROM\s+{$wpdb->prefix}posts/","FROM {$wpdb->prefix}posts
                    INNER JOIN {$wpdb->prefix}postmeta as intrackt_offers_pm1
                    ON {$wpdb->prefix}posts.ID = intrackt_offers_pm1.post_id
                    AND intrackt_offers_pm1.meta_key = 'orig_offer_product_id'
                    AND intrackt_offers_pm1.meta_value IN ({$intracktOfferVendorProducts})
                    ",$query);
        
            /*
             * do this if the user is not a vendor (store owner)
             */
            } elseif ($intracktVendorsOptions['hidevendoroffers']==1) {

                //PageLog::updateTestLog("filterOfferQuerys not vendor or administrator");
                /*
                 * get all vendor products
                 */
                self::getAllVendorsProducts();
                
                /*
                 * add filter by this vendor's products
                 */
                $query=preg_replace("/FROM\s+{$wpdb->prefix}posts/","FROM {$wpdb->prefix}posts
                    INNER JOIN {$wpdb->prefix}postmeta as intrackt_offers_pm1
                    ON {$wpdb->prefix}posts.ID = intrackt_offers_pm1.post_id
                    AND intrackt_offers_pm1.meta_key = 'orig_offer_product_id'
                    AND intrackt_offers_pm1.meta_value NOT IN ({$intracktOfferAllVendorProducts})
                    ",$query);
        
            }

        }
        
        /*
         * always return query, modified or not
         */
        return $query;
        
    }
        
    /*
     * filter seller email address
     */
    public static function filterSellerEmailAddress($to,$offer) {
        
        global $wpdb;
        
        /*
         * get product ID
         */
        $productId=$offer['product_id'];
        
        /*
         * get vendor email address
         */
        $userEmail=$wpdb->get_var($wpdb->prepare("
            SELECT u.user_email
            FROM {$wpdb->prefix}users as u,
                {$wpdb->prefix}term_relationships AS tr,
                {$wpdb->prefix}term_taxonomy as tt,
                {$wpdb->prefix}termmeta as tm
            WHERE u.ID=tm.meta_value
                AND tm.meta_key='owner'
                AND tm.term_id=tt.term_id
                AND tt.taxonomy='yith_shop_vendor'
                AND tr.term_taxonomy_id=tt.term_id
                AND tr.object_id=%d
            ",$productId));
                
        /*
         * if email exists, change the email to address
         */
        if (($userEmail!==null)&&($userEmail!='')) {
            $toNew=$userEmail;
        } else {
            $toNew=$to;
        }
        
        //PageLog::updateTestLog(' filterSellerEmailAddress $to: '.$to);
        //PageLog::updateTestObjectLog('filterSellerEmailAddress $offer', $offer);
        
        return apply_filters('intrackt_offers_vendors_get_toemailaddress',$toNew,$to,$offer);
        
    }
        
    /*
     * filter seller email address
     */
    public static function enableOffersMenuItem($keepers) {
        
        global $submenu,$menu;
        
        $keepers[]='intrackt-vendor-offers';        
        
        return $keepers;
        
        }
        
    /*
     * Adjust admin menu
     */
    public static function adjustAdminMenu() {
        
        global $menu,$submenu;
        
        $myRoles=wp_get_current_user()->roles;
        $isVendor=(in_array('yith_vendor',$myRoles)&&(!in_array('administrator',$myRoles)));
        
        foreach ($menu as $key=>$menuItem) {
            if ($menuItem[2]=='intrackt-vendor-offers') {
                if ($isVendor) {
                    $menu[$key][2]='edit.php?post_type=woocommerce_offer';
                } else {
                    unset($menu[$key]);
                }
                break;
            }
        }
        
        return;
        
        }
        
    /*
     * dummy page for offers if offers for woocommerce installed
     * (REQUIRED so do NOT remove)
     */
    public static function listOffers() {
        //PageLog::updateTestLog("listOffers");
        
    }
        
}

